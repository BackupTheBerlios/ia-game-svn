/* Generated By:JavaCC: Do not edit this line. BAJParserTokenManager.java */
/**
 * AVERTISSEMENT : Ces fichiers sont générés de manière automatique par JavaCC
 * à partir du fichier BAJParser.jj
 */

package jeu.shazamm.parser;
import java.util.*;
import jeu.shazamm.coup.*;
import jeu.shazamm.core.*;

public class BAJParserTokenManager implements BAJParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa1_0(0x300L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x10800L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0x300L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4400L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      default :
         return 2;
   }
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x4080L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      default :
         return 3;
   }
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4100L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8800L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      default :
         return 4;
   }
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      default :
         return 5;
   }
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x10020L);
      case 78:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(5, 6);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x8100L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      default :
         return 6;
   }
   return 6;
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 46:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 60:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(6, 8);
         break;
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(6, 10);
         break;
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      default :
         return 7;
   }
   return 7;
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 60:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(7, 9);
         break;
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L);
      case 78:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(7, 5);
         break;
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      default :
         return 8;
   }
   return 8;
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      default :
         return 9;
   }
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x2080L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      default :
         return 10;
   }
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      case 77:
         return jjMoveStringLiteralDfa11_0(active0, 0x80L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      default :
         return 11;
   }
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0x800L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x80L);
      case 83:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(11, 13);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(11, 14);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      default :
         return 12;
   }
   return 12;
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0x80L);
      case 85:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x8800L);
      default :
         return 13;
   }
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(13, 15);
         break;
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x80L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(13, 11);
         break;
      default :
         return 14;
   }
   return 14;
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(14, 7);
         break;
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000L);
      default :
         return 15;
   }
   return 15;
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 15;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 15;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000L);
      default :
         return 16;
   }
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 16;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 16;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000L);
      default :
         return 17;
   }
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 17;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 17;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(17, 16);
         break;
      default :
         return 18;
   }
   return 18;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 38:
         return jjMoveStringLiteralDfa1_1(0x20000L);
      case 60:
         return jjMoveStringLiteralDfa1_1(0x2000000L);
      case 86:
         return jjMoveStringLiteralDfa1_1(0x4000000L);
      default :
         return jjMoveNfa_1(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(4, 25);
         break;
      case 100:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 59:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(5, 17);
         break;
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0xa100f0400000000L
};
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 10);
                  else if (curChar == 62)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 0:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(1, 3);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 3);
                  break;
               case 2:
                  if (curChar == 45 && kind > 22)
                     kind = 22;
                  break;
               case 3:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 10);
                  break;
               case 10:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 62)
                     jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 60 && kind > 19)
                     kind = 19;
                  break;
               case 15:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0x3ff200100000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 60 && kind > 20)
                     kind = 20;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 22:
                  if (curChar == 32)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 24:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 60 && kind > 23)
                     kind = 23;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 7:
                  if (curChar == 115 && kind > 24)
                     kind = 24;
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 15:
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 20:
                  if ((0x44000000000000L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 15:
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 28;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 27;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec1[i2] & l2) != 0L && kind > 27)
                     kind = 27;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   12, 13, 15, 19, 21, 24, 25, 21, 24, 25, 24, 23, 25, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\115\101\116\103\110\105\40\116", 
"\124\117\125\122\40\116", "\102\111\114\101\116\40\104\105\123\40\115\111\123\105\123", 
"\42\76\115\151\163\145\74", "\42\76\123\157\162\164\163\74", "\103\154\157\156\141\147\145", 
"\104\145\163\164\162\165\143\164\151\157\156\40\144\145", "\126\157\154\40\144\145", "\122\145\143\171\143\154\141\147\145\40\144\145", 
"\143\154\114\151\145\156\120\141\162\164\151\145", "\160\141\162\164\151\145\56\160\150\160\77\151\144\75", 
"\104\105\122\116\111\105\122\123\40\122\105\123\125\114\124\101\124\123", null, null, null, null, null, null, null, null, "\74\57\164\162\76", 
"\126\157\154\40\144\145", null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "MISE", 
   "NUM_INT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 2, 2, 1, 1, 1, 1, 1, 1, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   0, -1, -1, 0, 
};
static final long[] jjtoToken = {
   0x17f9ffe1L, 
};
static final long[] jjtoSkip = {
   0x8060010L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[26];
private final int[] jjstateSet = new int[52];
protected char curChar;
public BAJParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public BAJParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 26; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 4)
       {
          jjmatchedKind = 4;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 18)
       {
          jjmatchedKind = 18;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
